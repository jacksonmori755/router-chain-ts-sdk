// @generated by protoc-gen-es v1.0.0 with parameter "rewrite_imports=./google/api/**/*_pb.js:@buf/googleapis_googleapis.bufbuild_es,rewrite_imports=./gogoproto/**/*_pb.js:@buf/cosmos_gogo-proto.bufbuild_es,rewrite_imports=./cosmos_proto/**/*_pb.js:@buf/cosmos_cosmos-proto.bufbuild_es"
// @generated from file cosmos/staking/v1beta1/staking.proto (package cosmos.staking.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, Duration, proto3, Timestamp } from "@bufbuild/protobuf";
import { Header } from "../../../tendermint/types/types_pb.js";
import { Coin } from "../../base/v1beta1/coin_pb.js";
import { ValidatorUpdate } from "../../../tendermint/abci/types_pb.js";

/**
 * BondStatus is the status of a validator.
 *
 * @generated from enum cosmos.staking.v1beta1.BondStatus
 */
export const BondStatus = proto3.makeEnum(
  "cosmos.staking.v1beta1.BondStatus",
  [
    {no: 0, name: "BOND_STATUS_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "BOND_STATUS_UNBONDED", localName: "UNBONDED"},
    {no: 2, name: "BOND_STATUS_UNBONDING", localName: "UNBONDING"},
    {no: 3, name: "BOND_STATUS_BONDED", localName: "BONDED"},
  ],
);

/**
 * Infraction indicates the infraction a validator commited.
 *
 * @generated from enum cosmos.staking.v1beta1.Infraction
 */
export const Infraction = proto3.makeEnum(
  "cosmos.staking.v1beta1.Infraction",
  [
    {no: 0, name: "INFRACTION_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "INFRACTION_DOUBLE_SIGN", localName: "DOUBLE_SIGN"},
    {no: 2, name: "INFRACTION_DOWNTIME", localName: "DOWNTIME"},
  ],
);

/**
 * HistoricalInfo contains header and validator information for a given block.
 * It is stored as part of staking module's state, which persists the `n` most
 * recent HistoricalInfo
 * (`n` is set by the staking module's `historical_entries` parameter).
 *
 * @generated from message cosmos.staking.v1beta1.HistoricalInfo
 */
export const HistoricalInfo = proto3.makeMessageType(
  "cosmos.staking.v1beta1.HistoricalInfo",
  () => [
    { no: 1, name: "header", kind: "message", T: Header },
    { no: 2, name: "valset", kind: "message", T: Validator, repeated: true },
  ],
);

/**
 * CommissionRates defines the initial commission rates to be used for creating
 * a validator.
 *
 * @generated from message cosmos.staking.v1beta1.CommissionRates
 */
export const CommissionRates = proto3.makeMessageType(
  "cosmos.staking.v1beta1.CommissionRates",
  () => [
    { no: 1, name: "rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "max_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "max_change_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Commission defines commission parameters for a given validator.
 *
 * @generated from message cosmos.staking.v1beta1.Commission
 */
export const Commission = proto3.makeMessageType(
  "cosmos.staking.v1beta1.Commission",
  () => [
    { no: 1, name: "commission_rates", kind: "message", T: CommissionRates },
    { no: 2, name: "update_time", kind: "message", T: Timestamp },
  ],
);

/**
 * Description defines a validator description.
 *
 * @generated from message cosmos.staking.v1beta1.Description
 */
export const Description = proto3.makeMessageType(
  "cosmos.staking.v1beta1.Description",
  () => [
    { no: 1, name: "moniker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "website", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "security_contact", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "details", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Validator defines a validator, together with the total amount of the
 * Validator's bond shares and their exchange rate to coins. Slashing results in
 * a decrease in the exchange rate, allowing correct calculation of future
 * undelegations without iterating over delegators. When coins are delegated to
 * this validator, the validator is credited with a delegation whose number of
 * bond shares is based on the amount of coins delegated divided by the current
 * exchange rate. Voting power can be calculated as total bonded shares
 * multiplied by exchange rate.
 *
 * @generated from message cosmos.staking.v1beta1.Validator
 */
export const Validator = proto3.makeMessageType(
  "cosmos.staking.v1beta1.Validator",
  () => [
    { no: 1, name: "operator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "consensus_pubkey", kind: "message", T: Any },
    { no: 3, name: "jailed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(BondStatus) },
    { no: 5, name: "tokens", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "delegator_shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "description", kind: "message", T: Description },
    { no: 8, name: "unbonding_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "unbonding_time", kind: "message", T: Timestamp },
    { no: 10, name: "commission", kind: "message", T: Commission },
    { no: 11, name: "min_self_delegation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "unbonding_on_hold_ref_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "unbonding_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ],
);

/**
 * ValAddresses defines a repeated set of validator addresses.
 *
 * @generated from message cosmos.staking.v1beta1.ValAddresses
 */
export const ValAddresses = proto3.makeMessageType(
  "cosmos.staking.v1beta1.ValAddresses",
  () => [
    { no: 1, name: "addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * DVPair is struct that just has a delegator-validator pair with no other data.
 * It is intended to be used as a marshalable pointer. For example, a DVPair can
 * be used to construct the key to getting an UnbondingDelegation from state.
 *
 * @generated from message cosmos.staking.v1beta1.DVPair
 */
export const DVPair = proto3.makeMessageType(
  "cosmos.staking.v1beta1.DVPair",
  () => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * DVPairs defines an array of DVPair objects.
 *
 * @generated from message cosmos.staking.v1beta1.DVPairs
 */
export const DVPairs = proto3.makeMessageType(
  "cosmos.staking.v1beta1.DVPairs",
  () => [
    { no: 1, name: "pairs", kind: "message", T: DVPair, repeated: true },
  ],
);

/**
 * DVVTriplet is struct that just has a delegator-validator-validator triplet
 * with no other data. It is intended to be used as a marshalable pointer. For
 * example, a DVVTriplet can be used to construct the key to getting a
 * Redelegation from state.
 *
 * @generated from message cosmos.staking.v1beta1.DVVTriplet
 */
export const DVVTriplet = proto3.makeMessageType(
  "cosmos.staking.v1beta1.DVVTriplet",
  () => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_src_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "validator_dst_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * DVVTriplets defines an array of DVVTriplet objects.
 *
 * @generated from message cosmos.staking.v1beta1.DVVTriplets
 */
export const DVVTriplets = proto3.makeMessageType(
  "cosmos.staking.v1beta1.DVVTriplets",
  () => [
    { no: 1, name: "triplets", kind: "message", T: DVVTriplet, repeated: true },
  ],
);

/**
 * Delegation represents the bond with tokens held by an account. It is
 * owned by one delegator, and is associated with the voting power of one
 * validator.
 *
 * @generated from message cosmos.staking.v1beta1.Delegation
 */
export const Delegation = proto3.makeMessageType(
  "cosmos.staking.v1beta1.Delegation",
  () => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * UnbondingDelegation stores all of a single delegator's unbonding bonds
 * for a single validator in an time-ordered list.
 *
 * @generated from message cosmos.staking.v1beta1.UnbondingDelegation
 */
export const UnbondingDelegation = proto3.makeMessageType(
  "cosmos.staking.v1beta1.UnbondingDelegation",
  () => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "entries", kind: "message", T: UnbondingDelegationEntry, repeated: true },
  ],
);

/**
 * UnbondingDelegationEntry defines an unbonding object with relevant metadata.
 *
 * @generated from message cosmos.staking.v1beta1.UnbondingDelegationEntry
 */
export const UnbondingDelegationEntry = proto3.makeMessageType(
  "cosmos.staking.v1beta1.UnbondingDelegationEntry",
  () => [
    { no: 1, name: "creation_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "completion_time", kind: "message", T: Timestamp },
    { no: 3, name: "initial_balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "unbonding_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "unbonding_on_hold_ref_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * RedelegationEntry defines a redelegation object with relevant metadata.
 *
 * @generated from message cosmos.staking.v1beta1.RedelegationEntry
 */
export const RedelegationEntry = proto3.makeMessageType(
  "cosmos.staking.v1beta1.RedelegationEntry",
  () => [
    { no: 1, name: "creation_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "completion_time", kind: "message", T: Timestamp },
    { no: 3, name: "initial_balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "shares_dst", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "unbonding_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "unbonding_on_hold_ref_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * Redelegation contains the list of a particular delegator's redelegating bonds
 * from a particular source validator to a particular destination validator.
 *
 * @generated from message cosmos.staking.v1beta1.Redelegation
 */
export const Redelegation = proto3.makeMessageType(
  "cosmos.staking.v1beta1.Redelegation",
  () => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_src_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "validator_dst_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "entries", kind: "message", T: RedelegationEntry, repeated: true },
  ],
);

/**
 * Params defines the parameters for the x/staking module.
 *
 * @generated from message cosmos.staking.v1beta1.Params
 */
export const Params = proto3.makeMessageType(
  "cosmos.staking.v1beta1.Params",
  () => [
    { no: 1, name: "unbonding_time", kind: "message", T: Duration },
    { no: 2, name: "max_validators", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "max_entries", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "historical_entries", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "bond_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "min_commission_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * DelegationResponse is equivalent to Delegation except that it contains a
 * balance in addition to shares which is more suitable for client responses.
 *
 * @generated from message cosmos.staking.v1beta1.DelegationResponse
 */
export const DelegationResponse = proto3.makeMessageType(
  "cosmos.staking.v1beta1.DelegationResponse",
  () => [
    { no: 1, name: "delegation", kind: "message", T: Delegation },
    { no: 2, name: "balance", kind: "message", T: Coin },
  ],
);

/**
 * RedelegationEntryResponse is equivalent to a RedelegationEntry except that it
 * contains a balance in addition to shares which is more suitable for client
 * responses.
 *
 * @generated from message cosmos.staking.v1beta1.RedelegationEntryResponse
 */
export const RedelegationEntryResponse = proto3.makeMessageType(
  "cosmos.staking.v1beta1.RedelegationEntryResponse",
  () => [
    { no: 1, name: "redelegation_entry", kind: "message", T: RedelegationEntry },
    { no: 4, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * RedelegationResponse is equivalent to a Redelegation except that its entries
 * contain a balance in addition to shares which is more suitable for client
 * responses.
 *
 * @generated from message cosmos.staking.v1beta1.RedelegationResponse
 */
export const RedelegationResponse = proto3.makeMessageType(
  "cosmos.staking.v1beta1.RedelegationResponse",
  () => [
    { no: 1, name: "redelegation", kind: "message", T: Redelegation },
    { no: 2, name: "entries", kind: "message", T: RedelegationEntryResponse, repeated: true },
  ],
);

/**
 * Pool is used for tracking bonded and not-bonded token supply of the bond
 * denomination.
 *
 * @generated from message cosmos.staking.v1beta1.Pool
 */
export const Pool = proto3.makeMessageType(
  "cosmos.staking.v1beta1.Pool",
  () => [
    { no: 1, name: "not_bonded_tokens", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bonded_tokens", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * ValidatorUpdates defines an array of abci.ValidatorUpdate objects.
 * TODO: explore moving this to proto/cosmos/base to separate modules from tendermint dependence
 *
 * @generated from message cosmos.staking.v1beta1.ValidatorUpdates
 */
export const ValidatorUpdates = proto3.makeMessageType(
  "cosmos.staking.v1beta1.ValidatorUpdates",
  () => [
    { no: 1, name: "updates", kind: "message", T: ValidatorUpdate, repeated: true },
  ],
);

