// Since: cosmos-sdk 0.46

// @generated by protoc-gen-es v1.0.0 with parameter "rewrite_imports=./google/api/**/*_pb.js:@buf/googleapis_googleapis.bufbuild_es,rewrite_imports=./gogoproto/**/*_pb.js:@buf/cosmos_gogo-proto.bufbuild_es,rewrite_imports=./cosmos_proto/**/*_pb.js:@buf/cosmos_cosmos-proto.bufbuild_es"
// @generated from file cosmos/group/v1/types.proto (package cosmos.group.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, Duration, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * VoteOption enumerates the valid vote options for a given proposal.
 *
 * @generated from enum cosmos.group.v1.VoteOption
 */
export const VoteOption = proto3.makeEnum(
  "cosmos.group.v1.VoteOption",
  [
    {no: 0, name: "VOTE_OPTION_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "VOTE_OPTION_YES", localName: "YES"},
    {no: 2, name: "VOTE_OPTION_ABSTAIN", localName: "ABSTAIN"},
    {no: 3, name: "VOTE_OPTION_NO", localName: "NO"},
    {no: 4, name: "VOTE_OPTION_NO_WITH_VETO", localName: "NO_WITH_VETO"},
  ],
);

/**
 * ProposalStatus defines proposal statuses.
 *
 * @generated from enum cosmos.group.v1.ProposalStatus
 */
export const ProposalStatus = proto3.makeEnum(
  "cosmos.group.v1.ProposalStatus",
  [
    {no: 0, name: "PROPOSAL_STATUS_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "PROPOSAL_STATUS_SUBMITTED", localName: "SUBMITTED"},
    {no: 2, name: "PROPOSAL_STATUS_ACCEPTED", localName: "ACCEPTED"},
    {no: 3, name: "PROPOSAL_STATUS_REJECTED", localName: "REJECTED"},
    {no: 4, name: "PROPOSAL_STATUS_ABORTED", localName: "ABORTED"},
    {no: 5, name: "PROPOSAL_STATUS_WITHDRAWN", localName: "WITHDRAWN"},
  ],
);

/**
 * ProposalExecutorResult defines types of proposal executor results.
 *
 * @generated from enum cosmos.group.v1.ProposalExecutorResult
 */
export const ProposalExecutorResult = proto3.makeEnum(
  "cosmos.group.v1.ProposalExecutorResult",
  [
    {no: 0, name: "PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "PROPOSAL_EXECUTOR_RESULT_NOT_RUN", localName: "NOT_RUN"},
    {no: 2, name: "PROPOSAL_EXECUTOR_RESULT_SUCCESS", localName: "SUCCESS"},
    {no: 3, name: "PROPOSAL_EXECUTOR_RESULT_FAILURE", localName: "FAILURE"},
  ],
);

/**
 * Member represents a group member with an account address,
 * non-zero weight, metadata and added_at timestamp.
 *
 * @generated from message cosmos.group.v1.Member
 */
export const Member = proto3.makeMessageType(
  "cosmos.group.v1.Member",
  () => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "added_at", kind: "message", T: Timestamp },
  ],
);

/**
 * MemberRequest represents a group member to be used in Msg server requests.
 * Contrary to `Member`, it doesn't have any `added_at` field
 * since this field cannot be set as part of requests.
 *
 * @generated from message cosmos.group.v1.MemberRequest
 */
export const MemberRequest = proto3.makeMessageType(
  "cosmos.group.v1.MemberRequest",
  () => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * ThresholdDecisionPolicy is a decision policy where a proposal passes when it
 * satisfies the two following conditions:
 * 1. The sum of all `YES` voters' weights is greater or equal than the defined
 *    `threshold`.
 * 2. The voting and execution periods of the proposal respect the parameters
 *    given by `windows`.
 *
 * @generated from message cosmos.group.v1.ThresholdDecisionPolicy
 */
export const ThresholdDecisionPolicy = proto3.makeMessageType(
  "cosmos.group.v1.ThresholdDecisionPolicy",
  () => [
    { no: 1, name: "threshold", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "windows", kind: "message", T: DecisionPolicyWindows },
  ],
);

/**
 * PercentageDecisionPolicy is a decision policy where a proposal passes when
 * it satisfies the two following conditions:
 * 1. The percentage of all `YES` voters' weights out of the total group weight
 *    is greater or equal than the given `percentage`.
 * 2. The voting and execution periods of the proposal respect the parameters
 *    given by `windows`.
 *
 * @generated from message cosmos.group.v1.PercentageDecisionPolicy
 */
export const PercentageDecisionPolicy = proto3.makeMessageType(
  "cosmos.group.v1.PercentageDecisionPolicy",
  () => [
    { no: 1, name: "percentage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "windows", kind: "message", T: DecisionPolicyWindows },
  ],
);

/**
 * DecisionPolicyWindows defines the different windows for voting and execution.
 *
 * @generated from message cosmos.group.v1.DecisionPolicyWindows
 */
export const DecisionPolicyWindows = proto3.makeMessageType(
  "cosmos.group.v1.DecisionPolicyWindows",
  () => [
    { no: 1, name: "voting_period", kind: "message", T: Duration },
    { no: 2, name: "min_execution_period", kind: "message", T: Duration },
  ],
);

/**
 * GroupInfo represents the high-level on-chain information for a group.
 *
 * @generated from message cosmos.group.v1.GroupInfo
 */
export const GroupInfo = proto3.makeMessageType(
  "cosmos.group.v1.GroupInfo",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "total_weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "created_at", kind: "message", T: Timestamp },
  ],
);

/**
 * GroupMember represents the relationship between a group and a member.
 *
 * @generated from message cosmos.group.v1.GroupMember
 */
export const GroupMember = proto3.makeMessageType(
  "cosmos.group.v1.GroupMember",
  () => [
    { no: 1, name: "group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "member", kind: "message", T: Member },
  ],
);

/**
 * GroupPolicyInfo represents the high-level on-chain information for a group policy.
 *
 * @generated from message cosmos.group.v1.GroupPolicyInfo
 */
export const GroupPolicyInfo = proto3.makeMessageType(
  "cosmos.group.v1.GroupPolicyInfo",
  () => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "decision_policy", kind: "message", T: Any },
    { no: 7, name: "created_at", kind: "message", T: Timestamp },
  ],
);

/**
 * Proposal defines a group proposal. Any member of a group can submit a proposal
 * for a group policy to decide upon.
 * A proposal consists of a set of `sdk.Msg`s that will be executed if the proposal
 * passes as well as some optional metadata associated with the proposal.
 *
 * @generated from message cosmos.group.v1.Proposal
 */
export const Proposal = proto3.makeMessageType(
  "cosmos.group.v1.Proposal",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "group_policy_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "proposers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "submit_time", kind: "message", T: Timestamp },
    { no: 6, name: "group_version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "group_policy_version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "status", kind: "enum", T: proto3.getEnumType(ProposalStatus) },
    { no: 9, name: "final_tally_result", kind: "message", T: TallyResult },
    { no: 10, name: "voting_period_end", kind: "message", T: Timestamp },
    { no: 11, name: "executor_result", kind: "enum", T: proto3.getEnumType(ProposalExecutorResult) },
    { no: 12, name: "messages", kind: "message", T: Any, repeated: true },
  ],
);

/**
 * TallyResult represents the sum of weighted votes for each vote option.
 *
 * @generated from message cosmos.group.v1.TallyResult
 */
export const TallyResult = proto3.makeMessageType(
  "cosmos.group.v1.TallyResult",
  () => [
    { no: 1, name: "yes_count", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "abstain_count", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "no_count", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "no_with_veto_count", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Vote represents a vote for a proposal.
 *
 * @generated from message cosmos.group.v1.Vote
 */
export const Vote = proto3.makeMessageType(
  "cosmos.group.v1.Vote",
  () => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "voter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "option", kind: "enum", T: proto3.getEnumType(VoteOption) },
    { no: 4, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "submit_time", kind: "message", T: Timestamp },
  ],
);

