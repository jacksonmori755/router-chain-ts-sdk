// Since: cosmos-sdk 0.46

// @generated by protoc-gen-es v1.0.0 with parameter "rewrite_imports=./google/api/**/*_pb.js:@buf/googleapis_googleapis.bufbuild_es,rewrite_imports=./gogoproto/**/*_pb.js:@buf/cosmos_gogo-proto.bufbuild_es,rewrite_imports=./cosmos_proto/**/*_pb.js:@buf/cosmos_cosmos-proto.bufbuild_es"
// @generated from file cosmos/group/v1/events.proto (package cosmos.group.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { ProposalExecutorResult } from "./types_pb.js";

/**
 * EventCreateGroup is an event emitted when a group is created.
 *
 * @generated from message cosmos.group.v1.EventCreateGroup
 */
export const EventCreateGroup = proto3.makeMessageType(
  "cosmos.group.v1.EventCreateGroup",
  () => [
    { no: 1, name: "group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * EventUpdateGroup is an event emitted when a group is updated.
 *
 * @generated from message cosmos.group.v1.EventUpdateGroup
 */
export const EventUpdateGroup = proto3.makeMessageType(
  "cosmos.group.v1.EventUpdateGroup",
  () => [
    { no: 1, name: "group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * EventCreateGroupPolicy is an event emitted when a group policy is created.
 *
 * @generated from message cosmos.group.v1.EventCreateGroupPolicy
 */
export const EventCreateGroupPolicy = proto3.makeMessageType(
  "cosmos.group.v1.EventCreateGroupPolicy",
  () => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * EventUpdateGroupPolicy is an event emitted when a group policy is updated.
 *
 * @generated from message cosmos.group.v1.EventUpdateGroupPolicy
 */
export const EventUpdateGroupPolicy = proto3.makeMessageType(
  "cosmos.group.v1.EventUpdateGroupPolicy",
  () => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * EventSubmitProposal is an event emitted when a proposal is created.
 *
 * @generated from message cosmos.group.v1.EventSubmitProposal
 */
export const EventSubmitProposal = proto3.makeMessageType(
  "cosmos.group.v1.EventSubmitProposal",
  () => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * EventWithdrawProposal is an event emitted when a proposal is withdrawn.
 *
 * @generated from message cosmos.group.v1.EventWithdrawProposal
 */
export const EventWithdrawProposal = proto3.makeMessageType(
  "cosmos.group.v1.EventWithdrawProposal",
  () => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * EventVote is an event emitted when a voter votes on a proposal.
 *
 * @generated from message cosmos.group.v1.EventVote
 */
export const EventVote = proto3.makeMessageType(
  "cosmos.group.v1.EventVote",
  () => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * EventExec is an event emitted when a proposal is executed.
 *
 * @generated from message cosmos.group.v1.EventExec
 */
export const EventExec = proto3.makeMessageType(
  "cosmos.group.v1.EventExec",
  () => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "result", kind: "enum", T: proto3.getEnumType(ProposalExecutorResult) },
    { no: 3, name: "logs", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * EventLeaveGroup is an event emitted when group member leaves the group.
 *
 * @generated from message cosmos.group.v1.EventLeaveGroup
 */
export const EventLeaveGroup = proto3.makeMessageType(
  "cosmos.group.v1.EventLeaveGroup",
  () => [
    { no: 1, name: "group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

