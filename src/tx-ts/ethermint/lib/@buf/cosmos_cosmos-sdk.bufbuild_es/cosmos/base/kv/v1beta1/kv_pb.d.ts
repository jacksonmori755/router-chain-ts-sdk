// @generated by protoc-gen-es v1.0.0 with parameter "rewrite_imports=./google/api/**/*_pb.js:@buf/googleapis_googleapis.bufbuild_es,rewrite_imports=./gogoproto/**/*_pb.js:@buf/cosmos_gogo-proto.bufbuild_es,rewrite_imports=./cosmos_proto/**/*_pb.js:@buf/cosmos_cosmos-proto.bufbuild_es"
// @generated from file cosmos/base/kv/v1beta1/kv.proto (package cosmos.base.kv.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Pairs defines a repeated slice of Pair objects.
 *
 * @generated from message cosmos.base.kv.v1beta1.Pairs
 */
export declare class Pairs extends Message<Pairs> {
  /**
   * @generated from field: repeated cosmos.base.kv.v1beta1.Pair pairs = 1;
   */
  pairs: Pair[];

  constructor(data?: PartialMessage<Pairs>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "cosmos.base.kv.v1beta1.Pairs";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pairs;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pairs;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pairs;

  static equals(a: Pairs | PlainMessage<Pairs> | undefined, b: Pairs | PlainMessage<Pairs> | undefined): boolean;
}

/**
 * Pair defines a key/value bytes tuple.
 *
 * @generated from message cosmos.base.kv.v1beta1.Pair
 */
export declare class Pair extends Message<Pair> {
  /**
   * @generated from field: bytes key = 1;
   */
  key: Uint8Array;

  /**
   * @generated from field: bytes value = 2;
   */
  value: Uint8Array;

  constructor(data?: PartialMessage<Pair>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "cosmos.base.kv.v1beta1.Pair";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pair;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pair;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pair;

  static equals(a: Pair | PlainMessage<Pair> | undefined, b: Pair | PlainMessage<Pair> | undefined): boolean;
}

