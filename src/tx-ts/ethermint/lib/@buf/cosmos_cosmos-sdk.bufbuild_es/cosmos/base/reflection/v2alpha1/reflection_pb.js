// Since: cosmos-sdk 0.43

// @generated by protoc-gen-es v1.0.0 with parameter "rewrite_imports=./google/api/**/*_pb.js:@buf/googleapis_googleapis.bufbuild_es,rewrite_imports=./gogoproto/**/*_pb.js:@buf/cosmos_gogo-proto.bufbuild_es,rewrite_imports=./cosmos_proto/**/*_pb.js:@buf/cosmos_cosmos-proto.bufbuild_es"
// @generated from file cosmos/base/reflection/v2alpha1/reflection.proto (package cosmos.base.reflection.v2alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * AppDescriptor describes a cosmos-sdk based application
 *
 * @generated from message cosmos.base.reflection.v2alpha1.AppDescriptor
 */
export const AppDescriptor = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.AppDescriptor",
  () => [
    { no: 1, name: "authn", kind: "message", T: AuthnDescriptor },
    { no: 2, name: "chain", kind: "message", T: ChainDescriptor },
    { no: 3, name: "codec", kind: "message", T: CodecDescriptor },
    { no: 4, name: "configuration", kind: "message", T: ConfigurationDescriptor },
    { no: 5, name: "query_services", kind: "message", T: QueryServicesDescriptor },
    { no: 6, name: "tx", kind: "message", T: TxDescriptor },
  ],
);

/**
 * TxDescriptor describes the accepted transaction type
 *
 * @generated from message cosmos.base.reflection.v2alpha1.TxDescriptor
 */
export const TxDescriptor = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.TxDescriptor",
  () => [
    { no: 1, name: "fullname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msgs", kind: "message", T: MsgDescriptor, repeated: true },
  ],
);

/**
 * AuthnDescriptor provides information on how to sign transactions without relying
 * on the online RPCs GetTxMetadata and CombineUnsignedTxAndSignatures
 *
 * @generated from message cosmos.base.reflection.v2alpha1.AuthnDescriptor
 */
export const AuthnDescriptor = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.AuthnDescriptor",
  () => [
    { no: 1, name: "sign_modes", kind: "message", T: SigningModeDescriptor, repeated: true },
  ],
);

/**
 * SigningModeDescriptor provides information on a signing flow of the application
 * NOTE(fdymylja): here we could go as far as providing an entire flow on how
 * to sign a message given a SigningModeDescriptor, but it's better to think about
 * this another time
 *
 * @generated from message cosmos.base.reflection.v2alpha1.SigningModeDescriptor
 */
export const SigningModeDescriptor = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.SigningModeDescriptor",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "authn_info_provider_method_fullname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * ChainDescriptor describes chain information of the application
 *
 * @generated from message cosmos.base.reflection.v2alpha1.ChainDescriptor
 */
export const ChainDescriptor = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.ChainDescriptor",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * CodecDescriptor describes the registered interfaces and provides metadata information on the types
 *
 * @generated from message cosmos.base.reflection.v2alpha1.CodecDescriptor
 */
export const CodecDescriptor = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.CodecDescriptor",
  () => [
    { no: 1, name: "interfaces", kind: "message", T: InterfaceDescriptor, repeated: true },
  ],
);

/**
 * InterfaceDescriptor describes the implementation of an interface
 *
 * @generated from message cosmos.base.reflection.v2alpha1.InterfaceDescriptor
 */
export const InterfaceDescriptor = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.InterfaceDescriptor",
  () => [
    { no: 1, name: "fullname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "interface_accepting_messages", kind: "message", T: InterfaceAcceptingMessageDescriptor, repeated: true },
    { no: 3, name: "interface_implementers", kind: "message", T: InterfaceImplementerDescriptor, repeated: true },
  ],
);

/**
 * InterfaceImplementerDescriptor describes an interface implementer
 *
 * @generated from message cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor
 */
export const InterfaceImplementerDescriptor = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor",
  () => [
    { no: 1, name: "fullname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * InterfaceAcceptingMessageDescriptor describes a protobuf message which contains
 * an interface represented as a google.protobuf.Any
 *
 * @generated from message cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor
 */
export const InterfaceAcceptingMessageDescriptor = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor",
  () => [
    { no: 1, name: "fullname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "field_descriptor_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * ConfigurationDescriptor contains metadata information on the sdk.Config
 *
 * @generated from message cosmos.base.reflection.v2alpha1.ConfigurationDescriptor
 */
export const ConfigurationDescriptor = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.ConfigurationDescriptor",
  () => [
    { no: 1, name: "bech32_account_address_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * MsgDescriptor describes a cosmos-sdk message that can be delivered with a transaction
 *
 * @generated from message cosmos.base.reflection.v2alpha1.MsgDescriptor
 */
export const MsgDescriptor = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.MsgDescriptor",
  () => [
    { no: 1, name: "msg_type_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * GetAuthnDescriptorRequest is the request used for the GetAuthnDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest
 */
export const GetAuthnDescriptorRequest = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest",
  [],
);

/**
 * GetAuthnDescriptorResponse is the response returned by the GetAuthnDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse
 */
export const GetAuthnDescriptorResponse = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse",
  () => [
    { no: 1, name: "authn", kind: "message", T: AuthnDescriptor },
  ],
);

/**
 * GetChainDescriptorRequest is the request used for the GetChainDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest
 */
export const GetChainDescriptorRequest = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest",
  [],
);

/**
 * GetChainDescriptorResponse is the response returned by the GetChainDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse
 */
export const GetChainDescriptorResponse = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse",
  () => [
    { no: 1, name: "chain", kind: "message", T: ChainDescriptor },
  ],
);

/**
 * GetCodecDescriptorRequest is the request used for the GetCodecDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest
 */
export const GetCodecDescriptorRequest = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest",
  [],
);

/**
 * GetCodecDescriptorResponse is the response returned by the GetCodecDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse
 */
export const GetCodecDescriptorResponse = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse",
  () => [
    { no: 1, name: "codec", kind: "message", T: CodecDescriptor },
  ],
);

/**
 * GetConfigurationDescriptorRequest is the request used for the GetConfigurationDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest
 */
export const GetConfigurationDescriptorRequest = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest",
  [],
);

/**
 * GetConfigurationDescriptorResponse is the response returned by the GetConfigurationDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse
 */
export const GetConfigurationDescriptorResponse = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse",
  () => [
    { no: 1, name: "config", kind: "message", T: ConfigurationDescriptor },
  ],
);

/**
 * GetQueryServicesDescriptorRequest is the request used for the GetQueryServicesDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest
 */
export const GetQueryServicesDescriptorRequest = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest",
  [],
);

/**
 * GetQueryServicesDescriptorResponse is the response returned by the GetQueryServicesDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse
 */
export const GetQueryServicesDescriptorResponse = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse",
  () => [
    { no: 1, name: "queries", kind: "message", T: QueryServicesDescriptor },
  ],
);

/**
 * GetTxDescriptorRequest is the request used for the GetTxDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest
 */
export const GetTxDescriptorRequest = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest",
  [],
);

/**
 * GetTxDescriptorResponse is the response returned by the GetTxDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse
 */
export const GetTxDescriptorResponse = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse",
  () => [
    { no: 1, name: "tx", kind: "message", T: TxDescriptor },
  ],
);

/**
 * QueryServicesDescriptor contains the list of cosmos-sdk queriable services
 *
 * @generated from message cosmos.base.reflection.v2alpha1.QueryServicesDescriptor
 */
export const QueryServicesDescriptor = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.QueryServicesDescriptor",
  () => [
    { no: 1, name: "query_services", kind: "message", T: QueryServiceDescriptor, repeated: true },
  ],
);

/**
 * QueryServiceDescriptor describes a cosmos-sdk queryable service
 *
 * @generated from message cosmos.base.reflection.v2alpha1.QueryServiceDescriptor
 */
export const QueryServiceDescriptor = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.QueryServiceDescriptor",
  () => [
    { no: 1, name: "fullname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_module", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "methods", kind: "message", T: QueryMethodDescriptor, repeated: true },
  ],
);

/**
 * QueryMethodDescriptor describes a queryable method of a query service
 * no other info is provided beside method name and tendermint queryable path
 * because it would be redundant with the grpc reflection service
 *
 * @generated from message cosmos.base.reflection.v2alpha1.QueryMethodDescriptor
 */
export const QueryMethodDescriptor = proto3.makeMessageType(
  "cosmos.base.reflection.v2alpha1.QueryMethodDescriptor",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "full_query_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

