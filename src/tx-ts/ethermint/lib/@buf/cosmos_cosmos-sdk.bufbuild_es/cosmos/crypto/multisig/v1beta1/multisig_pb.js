// @generated by protoc-gen-es v1.0.0 with parameter "rewrite_imports=./google/api/**/*_pb.js:@buf/googleapis_googleapis.bufbuild_es,rewrite_imports=./gogoproto/**/*_pb.js:@buf/cosmos_gogo-proto.bufbuild_es,rewrite_imports=./cosmos_proto/**/*_pb.js:@buf/cosmos_cosmos-proto.bufbuild_es"
// @generated from file cosmos/crypto/multisig/v1beta1/multisig.proto (package cosmos.crypto.multisig.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * MultiSignature wraps the signatures from a multisig.LegacyAminoPubKey.
 * See cosmos.tx.v1betata1.ModeInfo.Multi for how to specify which signers
 * signed and with which modes.
 *
 * @generated from message cosmos.crypto.multisig.v1beta1.MultiSignature
 */
export const MultiSignature = proto3.makeMessageType(
  "cosmos.crypto.multisig.v1beta1.MultiSignature",
  () => [
    { no: 1, name: "signatures", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ],
);

/**
 * CompactBitArray is an implementation of a space efficient bit array.
 * This is used to ensure that the encoded data takes up a minimal amount of
 * space after proto encoding.
 * This is not thread safe, and is not intended for concurrent usage.
 *
 * @generated from message cosmos.crypto.multisig.v1beta1.CompactBitArray
 */
export const CompactBitArray = proto3.makeMessageType(
  "cosmos.crypto.multisig.v1beta1.CompactBitArray",
  () => [
    { no: 1, name: "extra_bits_stored", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "elems", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

