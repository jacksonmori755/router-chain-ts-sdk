// @generated by protoc-gen-es v1.0.0 with parameter "rewrite_imports=./google/api/**/*_pb.js:@buf/googleapis_googleapis.bufbuild_es,rewrite_imports=./gogoproto/**/*_pb.js:@buf/cosmos_gogo-proto.bufbuild_es,rewrite_imports=./cosmos_proto/**/*_pb.js:@buf/cosmos_cosmos-proto.bufbuild_es"
// @generated from file cosmos/tx/signing/v1beta1/signing.proto (package cosmos.tx.signing.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, proto3 } from "@bufbuild/protobuf";
import { CompactBitArray } from "../../../crypto/multisig/v1beta1/multisig_pb.js";

/**
 * SignMode represents a signing mode with its own security guarantees.
 *
 * This enum should be considered a registry of all known sign modes
 * in the Cosmos ecosystem. Apps are not expected to support all known
 * sign modes. Apps that would like to support custom  sign modes are
 * encouraged to open a small PR against this file to add a new case
 * to this SignMode enum describing their sign mode so that different
 * apps have a consistent version of this enum.
 *
 * @generated from enum cosmos.tx.signing.v1beta1.SignMode
 */
export const SignMode = proto3.makeEnum(
  "cosmos.tx.signing.v1beta1.SignMode",
  [
    {no: 0, name: "SIGN_MODE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "SIGN_MODE_DIRECT", localName: "DIRECT"},
    {no: 2, name: "SIGN_MODE_TEXTUAL", localName: "TEXTUAL"},
    {no: 3, name: "SIGN_MODE_DIRECT_AUX", localName: "DIRECT_AUX"},
    {no: 127, name: "SIGN_MODE_LEGACY_AMINO_JSON", localName: "LEGACY_AMINO_JSON"},
    {no: 191, name: "SIGN_MODE_EIP_191", localName: "EIP_191"},
  ],
);

/**
 * SignatureDescriptors wraps multiple SignatureDescriptor's.
 *
 * @generated from message cosmos.tx.signing.v1beta1.SignatureDescriptors
 */
export const SignatureDescriptors = proto3.makeMessageType(
  "cosmos.tx.signing.v1beta1.SignatureDescriptors",
  () => [
    { no: 1, name: "signatures", kind: "message", T: SignatureDescriptor, repeated: true },
  ],
);

/**
 * SignatureDescriptor is a convenience type which represents the full data for
 * a signature including the public key of the signer, signing modes and the
 * signature itself. It is primarily used for coordinating signatures between
 * clients.
 *
 * @generated from message cosmos.tx.signing.v1beta1.SignatureDescriptor
 */
export const SignatureDescriptor = proto3.makeMessageType(
  "cosmos.tx.signing.v1beta1.SignatureDescriptor",
  () => [
    { no: 1, name: "public_key", kind: "message", T: Any },
    { no: 2, name: "data", kind: "message", T: SignatureDescriptor_Data },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * Data represents signature data
 *
 * @generated from message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data
 */
export const SignatureDescriptor_Data = proto3.makeMessageType(
  "cosmos.tx.signing.v1beta1.SignatureDescriptor.Data",
  () => [
    { no: 1, name: "single", kind: "message", T: SignatureDescriptor_Data_Single, oneof: "sum" },
    { no: 2, name: "multi", kind: "message", T: SignatureDescriptor_Data_Multi, oneof: "sum" },
  ],
  {localName: "SignatureDescriptor_Data"},
);

/**
 * Single is the signature data for a single signer
 *
 * @generated from message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single
 */
export const SignatureDescriptor_Data_Single = proto3.makeMessageType(
  "cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single",
  () => [
    { no: 1, name: "mode", kind: "enum", T: proto3.getEnumType(SignMode) },
    { no: 2, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
  {localName: "SignatureDescriptor_Data_Single"},
);

/**
 * Multi is the signature data for a multisig public key
 *
 * @generated from message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi
 */
export const SignatureDescriptor_Data_Multi = proto3.makeMessageType(
  "cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi",
  () => [
    { no: 1, name: "bitarray", kind: "message", T: CompactBitArray },
    { no: 2, name: "signatures", kind: "message", T: SignatureDescriptor_Data, repeated: true },
  ],
  {localName: "SignatureDescriptor_Data_Multi"},
);

