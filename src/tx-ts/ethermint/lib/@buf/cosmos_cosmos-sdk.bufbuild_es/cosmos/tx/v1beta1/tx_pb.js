// @generated by protoc-gen-es v1.0.0 with parameter "rewrite_imports=./google/api/**/*_pb.js:@buf/googleapis_googleapis.bufbuild_es,rewrite_imports=./gogoproto/**/*_pb.js:@buf/cosmos_gogo-proto.bufbuild_es,rewrite_imports=./cosmos_proto/**/*_pb.js:@buf/cosmos_cosmos-proto.bufbuild_es"
// @generated from file cosmos/tx/v1beta1/tx.proto (package cosmos.tx.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, proto3 } from "@bufbuild/protobuf";
import { SignMode } from "../signing/v1beta1/signing_pb.js";
import { CompactBitArray } from "../../crypto/multisig/v1beta1/multisig_pb.js";
import { Coin } from "../../base/v1beta1/coin_pb.js";

/**
 * Tx is the standard type used for broadcasting transactions.
 *
 * @generated from message cosmos.tx.v1beta1.Tx
 */
export const Tx = proto3.makeMessageType(
  "cosmos.tx.v1beta1.Tx",
  () => [
    { no: 1, name: "body", kind: "message", T: TxBody },
    { no: 2, name: "auth_info", kind: "message", T: AuthInfo },
    { no: 3, name: "signatures", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ],
);

/**
 * TxRaw is a variant of Tx that pins the signer's exact binary representation
 * of body and auth_info. This is used for signing, broadcasting and
 * verification. The binary `serialize(tx: TxRaw)` is stored in Tendermint and
 * the hash `sha256(serialize(tx: TxRaw))` becomes the "txhash", commonly used
 * as the transaction ID.
 *
 * @generated from message cosmos.tx.v1beta1.TxRaw
 */
export const TxRaw = proto3.makeMessageType(
  "cosmos.tx.v1beta1.TxRaw",
  () => [
    { no: 1, name: "body_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "auth_info_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "signatures", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ],
);

/**
 * SignDoc is the type used for generating sign bytes for SIGN_MODE_DIRECT.
 *
 * @generated from message cosmos.tx.v1beta1.SignDoc
 */
export const SignDoc = proto3.makeMessageType(
  "cosmos.tx.v1beta1.SignDoc",
  () => [
    { no: 1, name: "body_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "auth_info_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "account_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * SignDocDirectAux is the type used for generating sign bytes for
 * SIGN_MODE_DIRECT_AUX.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.tx.v1beta1.SignDocDirectAux
 */
export const SignDocDirectAux = proto3.makeMessageType(
  "cosmos.tx.v1beta1.SignDocDirectAux",
  () => [
    { no: 1, name: "body_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "public_key", kind: "message", T: Any },
    { no: 3, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "account_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "tip", kind: "message", T: Tip },
  ],
);

/**
 * TxBody is the body of a transaction that all signers sign over.
 *
 * @generated from message cosmos.tx.v1beta1.TxBody
 */
export const TxBody = proto3.makeMessageType(
  "cosmos.tx.v1beta1.TxBody",
  () => [
    { no: 1, name: "messages", kind: "message", T: Any, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timeout_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 1023, name: "extension_options", kind: "message", T: Any, repeated: true },
    { no: 2047, name: "non_critical_extension_options", kind: "message", T: Any, repeated: true },
  ],
);

/**
 * AuthInfo describes the fee and signer modes that are used to sign a
 * transaction.
 *
 * @generated from message cosmos.tx.v1beta1.AuthInfo
 */
export const AuthInfo = proto3.makeMessageType(
  "cosmos.tx.v1beta1.AuthInfo",
  () => [
    { no: 1, name: "signer_infos", kind: "message", T: SignerInfo, repeated: true },
    { no: 2, name: "fee", kind: "message", T: Fee },
    { no: 3, name: "tip", kind: "message", T: Tip },
  ],
);

/**
 * SignerInfo describes the public key and signing mode of a single top-level
 * signer.
 *
 * @generated from message cosmos.tx.v1beta1.SignerInfo
 */
export const SignerInfo = proto3.makeMessageType(
  "cosmos.tx.v1beta1.SignerInfo",
  () => [
    { no: 1, name: "public_key", kind: "message", T: Any },
    { no: 2, name: "mode_info", kind: "message", T: ModeInfo },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * ModeInfo describes the signing mode of a single or nested multisig signer.
 *
 * @generated from message cosmos.tx.v1beta1.ModeInfo
 */
export const ModeInfo = proto3.makeMessageType(
  "cosmos.tx.v1beta1.ModeInfo",
  () => [
    { no: 1, name: "single", kind: "message", T: ModeInfo_Single, oneof: "sum" },
    { no: 2, name: "multi", kind: "message", T: ModeInfo_Multi, oneof: "sum" },
  ],
);

/**
 * Single is the mode info for a single signer. It is structured as a message
 * to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the
 * future
 *
 * @generated from message cosmos.tx.v1beta1.ModeInfo.Single
 */
export const ModeInfo_Single = proto3.makeMessageType(
  "cosmos.tx.v1beta1.ModeInfo.Single",
  () => [
    { no: 1, name: "mode", kind: "enum", T: proto3.getEnumType(SignMode) },
  ],
  {localName: "ModeInfo_Single"},
);

/**
 * Multi is the mode info for a multisig public key
 *
 * @generated from message cosmos.tx.v1beta1.ModeInfo.Multi
 */
export const ModeInfo_Multi = proto3.makeMessageType(
  "cosmos.tx.v1beta1.ModeInfo.Multi",
  () => [
    { no: 1, name: "bitarray", kind: "message", T: CompactBitArray },
    { no: 2, name: "mode_infos", kind: "message", T: ModeInfo, repeated: true },
  ],
  {localName: "ModeInfo_Multi"},
);

/**
 * Fee includes the amount of coins paid in fees and the maximum
 * gas to be used by the transaction. The ratio yields an effective "gasprice",
 * which must be above some miminum to be accepted into the mempool.
 *
 * @generated from message cosmos.tx.v1beta1.Fee
 */
export const Fee = proto3.makeMessageType(
  "cosmos.tx.v1beta1.Fee",
  () => [
    { no: 1, name: "amount", kind: "message", T: Coin, repeated: true },
    { no: 2, name: "gas_limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "payer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "granter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Tip is the tip used for meta-transactions.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.tx.v1beta1.Tip
 */
export const Tip = proto3.makeMessageType(
  "cosmos.tx.v1beta1.Tip",
  () => [
    { no: 1, name: "amount", kind: "message", T: Coin, repeated: true },
    { no: 2, name: "tipper", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * AuxSignerData is the intermediary format that an auxiliary signer (e.g. a
 * tipper) builds and sends to the fee payer (who will build and broadcast the
 * actual tx). AuxSignerData is not a valid tx in itself, and will be rejected
 * by the node if sent directly as-is.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.tx.v1beta1.AuxSignerData
 */
export const AuxSignerData = proto3.makeMessageType(
  "cosmos.tx.v1beta1.AuxSignerData",
  () => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sign_doc", kind: "message", T: SignDocDirectAux },
    { no: 3, name: "mode", kind: "enum", T: proto3.getEnumType(SignMode) },
    { no: 4, name: "sig", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

