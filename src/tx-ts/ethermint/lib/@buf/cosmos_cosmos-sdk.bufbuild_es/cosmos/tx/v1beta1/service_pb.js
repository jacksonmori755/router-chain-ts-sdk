// @generated by protoc-gen-es v1.0.0 with parameter "rewrite_imports=./google/api/**/*_pb.js:@buf/googleapis_googleapis.bufbuild_es,rewrite_imports=./gogoproto/**/*_pb.js:@buf/cosmos_gogo-proto.bufbuild_es,rewrite_imports=./cosmos_proto/**/*_pb.js:@buf/cosmos_cosmos-proto.bufbuild_es"
// @generated from file cosmos/tx/v1beta1/service.proto (package cosmos.tx.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { PageRequest, PageResponse } from "../../base/query/v1beta1/pagination_pb.js";
import { Tx } from "./tx_pb.js";
import { GasInfo, Result, TxResponse } from "../../base/abci/v1beta1/abci_pb.js";
import { BlockID } from "../../../tendermint/types/types_pb.js";
import { Block } from "../../../tendermint/types/block_pb.js";

/**
 * OrderBy defines the sorting order
 *
 * @generated from enum cosmos.tx.v1beta1.OrderBy
 */
export const OrderBy = proto3.makeEnum(
  "cosmos.tx.v1beta1.OrderBy",
  [
    {no: 0, name: "ORDER_BY_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "ORDER_BY_ASC", localName: "ASC"},
    {no: 2, name: "ORDER_BY_DESC", localName: "DESC"},
  ],
);

/**
 * BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method.
 *
 * @generated from enum cosmos.tx.v1beta1.BroadcastMode
 */
export const BroadcastMode = proto3.makeEnum(
  "cosmos.tx.v1beta1.BroadcastMode",
  [
    {no: 0, name: "BROADCAST_MODE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "BROADCAST_MODE_BLOCK", localName: "BLOCK"},
    {no: 2, name: "BROADCAST_MODE_SYNC", localName: "SYNC"},
    {no: 3, name: "BROADCAST_MODE_ASYNC", localName: "ASYNC"},
  ],
);

/**
 * GetTxsEventRequest is the request type for the Service.TxsByEvents
 * RPC method.
 *
 * @generated from message cosmos.tx.v1beta1.GetTxsEventRequest
 */
export const GetTxsEventRequest = proto3.makeMessageType(
  "cosmos.tx.v1beta1.GetTxsEventRequest",
  () => [
    { no: 1, name: "events", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
    { no: 3, name: "order_by", kind: "enum", T: proto3.getEnumType(OrderBy) },
    { no: 4, name: "page", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * GetTxsEventResponse is the response type for the Service.TxsByEvents
 * RPC method.
 *
 * @generated from message cosmos.tx.v1beta1.GetTxsEventResponse
 */
export const GetTxsEventResponse = proto3.makeMessageType(
  "cosmos.tx.v1beta1.GetTxsEventResponse",
  () => [
    { no: 1, name: "txs", kind: "message", T: Tx, repeated: true },
    { no: 2, name: "tx_responses", kind: "message", T: TxResponse, repeated: true },
    { no: 3, name: "pagination", kind: "message", T: PageResponse },
    { no: 4, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * BroadcastTxRequest is the request type for the Service.BroadcastTxRequest
 * RPC method.
 *
 * @generated from message cosmos.tx.v1beta1.BroadcastTxRequest
 */
export const BroadcastTxRequest = proto3.makeMessageType(
  "cosmos.tx.v1beta1.BroadcastTxRequest",
  () => [
    { no: 1, name: "tx_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "mode", kind: "enum", T: proto3.getEnumType(BroadcastMode) },
  ],
);

/**
 * BroadcastTxResponse is the response type for the
 * Service.BroadcastTx method.
 *
 * @generated from message cosmos.tx.v1beta1.BroadcastTxResponse
 */
export const BroadcastTxResponse = proto3.makeMessageType(
  "cosmos.tx.v1beta1.BroadcastTxResponse",
  () => [
    { no: 1, name: "tx_response", kind: "message", T: TxResponse },
  ],
);

/**
 * SimulateRequest is the request type for the Service.Simulate
 * RPC method.
 *
 * @generated from message cosmos.tx.v1beta1.SimulateRequest
 */
export const SimulateRequest = proto3.makeMessageType(
  "cosmos.tx.v1beta1.SimulateRequest",
  () => [
    { no: 1, name: "tx", kind: "message", T: Tx },
    { no: 2, name: "tx_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * SimulateResponse is the response type for the
 * Service.SimulateRPC method.
 *
 * @generated from message cosmos.tx.v1beta1.SimulateResponse
 */
export const SimulateResponse = proto3.makeMessageType(
  "cosmos.tx.v1beta1.SimulateResponse",
  () => [
    { no: 1, name: "gas_info", kind: "message", T: GasInfo },
    { no: 2, name: "result", kind: "message", T: Result },
  ],
);

/**
 * GetTxRequest is the request type for the Service.GetTx
 * RPC method.
 *
 * @generated from message cosmos.tx.v1beta1.GetTxRequest
 */
export const GetTxRequest = proto3.makeMessageType(
  "cosmos.tx.v1beta1.GetTxRequest",
  () => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * GetTxResponse is the response type for the Service.GetTx method.
 *
 * @generated from message cosmos.tx.v1beta1.GetTxResponse
 */
export const GetTxResponse = proto3.makeMessageType(
  "cosmos.tx.v1beta1.GetTxResponse",
  () => [
    { no: 1, name: "tx", kind: "message", T: Tx },
    { no: 2, name: "tx_response", kind: "message", T: TxResponse },
  ],
);

/**
 * GetBlockWithTxsRequest is the request type for the Service.GetBlockWithTxs
 * RPC method.
 *
 * Since: cosmos-sdk 0.45.2
 *
 * @generated from message cosmos.tx.v1beta1.GetBlockWithTxsRequest
 */
export const GetBlockWithTxsRequest = proto3.makeMessageType(
  "cosmos.tx.v1beta1.GetBlockWithTxsRequest",
  () => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ],
);

/**
 * GetBlockWithTxsResponse is the response type for the Service.GetBlockWithTxs method.
 *
 * Since: cosmos-sdk 0.45.2
 *
 * @generated from message cosmos.tx.v1beta1.GetBlockWithTxsResponse
 */
export const GetBlockWithTxsResponse = proto3.makeMessageType(
  "cosmos.tx.v1beta1.GetBlockWithTxsResponse",
  () => [
    { no: 1, name: "txs", kind: "message", T: Tx, repeated: true },
    { no: 2, name: "block_id", kind: "message", T: BlockID },
    { no: 3, name: "block", kind: "message", T: Block },
    { no: 4, name: "pagination", kind: "message", T: PageResponse },
  ],
);

/**
 * TxDecodeRequest is the request type for the Service.TxDecode
 * RPC method.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.tx.v1beta1.TxDecodeRequest
 */
export const TxDecodeRequest = proto3.makeMessageType(
  "cosmos.tx.v1beta1.TxDecodeRequest",
  () => [
    { no: 1, name: "tx_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * TxDecodeResponse is the response type for the
 * Service.TxDecode method.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.tx.v1beta1.TxDecodeResponse
 */
export const TxDecodeResponse = proto3.makeMessageType(
  "cosmos.tx.v1beta1.TxDecodeResponse",
  () => [
    { no: 1, name: "tx", kind: "message", T: Tx },
  ],
);

/**
 * TxEncodeResponse is the request type for the Service.TxEncode
 * RPC method.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.tx.v1beta1.TxEncodeRequest
 */
export const TxEncodeRequest = proto3.makeMessageType(
  "cosmos.tx.v1beta1.TxEncodeRequest",
  () => [
    { no: 1, name: "tx", kind: "message", T: Tx },
  ],
);

/**
 * TxEncodeResponse is the response type for the
 * Service.TxEncode method.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.tx.v1beta1.TxEncodeResponse
 */
export const TxEncodeResponse = proto3.makeMessageType(
  "cosmos.tx.v1beta1.TxEncodeResponse",
  () => [
    { no: 1, name: "tx_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

