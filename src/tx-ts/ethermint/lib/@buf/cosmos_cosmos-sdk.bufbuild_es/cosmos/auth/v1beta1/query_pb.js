// @generated by protoc-gen-es v1.0.0 with parameter "rewrite_imports=./google/api/**/*_pb.js:@buf/googleapis_googleapis.bufbuild_es,rewrite_imports=./gogoproto/**/*_pb.js:@buf/cosmos_gogo-proto.bufbuild_es,rewrite_imports=./cosmos_proto/**/*_pb.js:@buf/cosmos_cosmos-proto.bufbuild_es"
// @generated from file cosmos/auth/v1beta1/query.proto (package cosmos.auth.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, proto3 } from "@bufbuild/protobuf";
import { PageRequest, PageResponse } from "../../base/query/v1beta1/pagination_pb.js";
import { BaseAccount, Params } from "./auth_pb.js";

/**
 * QueryAccountsRequest is the request type for the Query/Accounts RPC method.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from message cosmos.auth.v1beta1.QueryAccountsRequest
 */
export const QueryAccountsRequest = proto3.makeMessageType(
  "cosmos.auth.v1beta1.QueryAccountsRequest",
  () => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ],
);

/**
 * QueryAccountsResponse is the response type for the Query/Accounts RPC method.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from message cosmos.auth.v1beta1.QueryAccountsResponse
 */
export const QueryAccountsResponse = proto3.makeMessageType(
  "cosmos.auth.v1beta1.QueryAccountsResponse",
  () => [
    { no: 1, name: "accounts", kind: "message", T: Any, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ],
);

/**
 * QueryAccountRequest is the request type for the Query/Account RPC method.
 *
 * @generated from message cosmos.auth.v1beta1.QueryAccountRequest
 */
export const QueryAccountRequest = proto3.makeMessageType(
  "cosmos.auth.v1beta1.QueryAccountRequest",
  () => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * QueryAccountResponse is the response type for the Query/Account RPC method.
 *
 * @generated from message cosmos.auth.v1beta1.QueryAccountResponse
 */
export const QueryAccountResponse = proto3.makeMessageType(
  "cosmos.auth.v1beta1.QueryAccountResponse",
  () => [
    { no: 1, name: "account", kind: "message", T: Any },
  ],
);

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message cosmos.auth.v1beta1.QueryParamsRequest
 */
export const QueryParamsRequest = proto3.makeMessageType(
  "cosmos.auth.v1beta1.QueryParamsRequest",
  [],
);

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message cosmos.auth.v1beta1.QueryParamsResponse
 */
export const QueryParamsResponse = proto3.makeMessageType(
  "cosmos.auth.v1beta1.QueryParamsResponse",
  () => [
    { no: 1, name: "params", kind: "message", T: Params },
  ],
);

/**
 * QueryModuleAccountsRequest is the request type for the Query/ModuleAccounts RPC method.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.auth.v1beta1.QueryModuleAccountsRequest
 */
export const QueryModuleAccountsRequest = proto3.makeMessageType(
  "cosmos.auth.v1beta1.QueryModuleAccountsRequest",
  [],
);

/**
 * QueryModuleAccountsResponse is the response type for the Query/ModuleAccounts RPC method.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.auth.v1beta1.QueryModuleAccountsResponse
 */
export const QueryModuleAccountsResponse = proto3.makeMessageType(
  "cosmos.auth.v1beta1.QueryModuleAccountsResponse",
  () => [
    { no: 1, name: "accounts", kind: "message", T: Any, repeated: true },
  ],
);

/**
 * QueryModuleAccountByNameRequest is the request type for the Query/ModuleAccountByName RPC method.
 *
 * @generated from message cosmos.auth.v1beta1.QueryModuleAccountByNameRequest
 */
export const QueryModuleAccountByNameRequest = proto3.makeMessageType(
  "cosmos.auth.v1beta1.QueryModuleAccountByNameRequest",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * QueryModuleAccountByNameResponse is the response type for the Query/ModuleAccountByName RPC method.
 *
 * @generated from message cosmos.auth.v1beta1.QueryModuleAccountByNameResponse
 */
export const QueryModuleAccountByNameResponse = proto3.makeMessageType(
  "cosmos.auth.v1beta1.QueryModuleAccountByNameResponse",
  () => [
    { no: 1, name: "account", kind: "message", T: Any },
  ],
);

/**
 * Bech32PrefixRequest is the request type for Bech32Prefix rpc method.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.auth.v1beta1.Bech32PrefixRequest
 */
export const Bech32PrefixRequest = proto3.makeMessageType(
  "cosmos.auth.v1beta1.Bech32PrefixRequest",
  [],
);

/**
 * Bech32PrefixResponse is the response type for Bech32Prefix rpc method.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.auth.v1beta1.Bech32PrefixResponse
 */
export const Bech32PrefixResponse = proto3.makeMessageType(
  "cosmos.auth.v1beta1.Bech32PrefixResponse",
  () => [
    { no: 1, name: "bech32_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * AddressBytesToStringRequest is the request type for AddressString rpc method.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.auth.v1beta1.AddressBytesToStringRequest
 */
export const AddressBytesToStringRequest = proto3.makeMessageType(
  "cosmos.auth.v1beta1.AddressBytesToStringRequest",
  () => [
    { no: 1, name: "address_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * AddressBytesToStringResponse is the response type for AddressString rpc method.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.auth.v1beta1.AddressBytesToStringResponse
 */
export const AddressBytesToStringResponse = proto3.makeMessageType(
  "cosmos.auth.v1beta1.AddressBytesToStringResponse",
  () => [
    { no: 1, name: "address_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * AddressStringToBytesRequest is the request type for AccountBytes rpc method.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.auth.v1beta1.AddressStringToBytesRequest
 */
export const AddressStringToBytesRequest = proto3.makeMessageType(
  "cosmos.auth.v1beta1.AddressStringToBytesRequest",
  () => [
    { no: 1, name: "address_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * AddressStringToBytesResponse is the response type for AddressBytes rpc method.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.auth.v1beta1.AddressStringToBytesResponse
 */
export const AddressStringToBytesResponse = proto3.makeMessageType(
  "cosmos.auth.v1beta1.AddressStringToBytesResponse",
  () => [
    { no: 1, name: "address_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * QueryAccountAddressByIDRequest is the request type for AccountAddressByID rpc method
 *
 * Since: cosmos-sdk 0.46.2
 *
 * @generated from message cosmos.auth.v1beta1.QueryAccountAddressByIDRequest
 */
export const QueryAccountAddressByIDRequest = proto3.makeMessageType(
  "cosmos.auth.v1beta1.QueryAccountAddressByIDRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * QueryAccountAddressByIDResponse is the response type for AccountAddressByID rpc method
 *
 * Since: cosmos-sdk 0.46.2
 *
 * @generated from message cosmos.auth.v1beta1.QueryAccountAddressByIDResponse
 */
export const QueryAccountAddressByIDResponse = proto3.makeMessageType(
  "cosmos.auth.v1beta1.QueryAccountAddressByIDResponse",
  () => [
    { no: 1, name: "account_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * QueryAccountInfoRequest is the Query/AccountInfo request type.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.auth.v1beta1.QueryAccountInfoRequest
 */
export const QueryAccountInfoRequest = proto3.makeMessageType(
  "cosmos.auth.v1beta1.QueryAccountInfoRequest",
  () => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * QueryAccountInfoResponse is the Query/AccountInfo response type.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.auth.v1beta1.QueryAccountInfoResponse
 */
export const QueryAccountInfoResponse = proto3.makeMessageType(
  "cosmos.auth.v1beta1.QueryAccountInfoResponse",
  () => [
    { no: 1, name: "info", kind: "message", T: BaseAccount },
  ],
);

