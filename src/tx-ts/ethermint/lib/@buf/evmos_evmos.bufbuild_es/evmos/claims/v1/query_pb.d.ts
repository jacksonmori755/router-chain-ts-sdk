// @generated by protoc-gen-es v1.0.0 with parameter "rewrite_imports=./google/api/**/*_pb.js:@buf/googleapis_googleapis.bufbuild_es,rewrite_imports=./gogoproto/**/*_pb.js:@buf/cosmos_gogo-proto.bufbuild_es,rewrite_imports=./cosmos_proto/**/*_pb.js:@buf/cosmos_cosmos-proto.bufbuild_es,rewrite_imports=./cosmos/vesting/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/msg/v1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/base/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/base/query/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/bank/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/auth/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./amino/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es"
// @generated from file evmos/claims/v1/query.proto (package evmos.claims.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Coin } from "@buf/cosmos_cosmos-sdk.bufbuild_es/cosmos/base/v1beta1/coin_pb.js";
import type { Params } from "./genesis_pb.js";
import type { PageRequest, PageResponse } from "@buf/cosmos_cosmos-sdk.bufbuild_es/cosmos/base/query/v1beta1/pagination_pb.js";
import type { Claim, ClaimsRecordAddress } from "./claims_pb.js";

/**
 * QueryTotalUnclaimedRequest is the request type for the Query/TotalUnclaimed
 * RPC method.
 *
 * @generated from message evmos.claims.v1.QueryTotalUnclaimedRequest
 */
export declare class QueryTotalUnclaimedRequest extends Message<QueryTotalUnclaimedRequest> {
  constructor(data?: PartialMessage<QueryTotalUnclaimedRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "evmos.claims.v1.QueryTotalUnclaimedRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalUnclaimedRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalUnclaimedRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalUnclaimedRequest;

  static equals(a: QueryTotalUnclaimedRequest | PlainMessage<QueryTotalUnclaimedRequest> | undefined, b: QueryTotalUnclaimedRequest | PlainMessage<QueryTotalUnclaimedRequest> | undefined): boolean;
}

/**
 * QueryTotalUnclaimedResponse is the response type for the Query/TotalUnclaimed
 * RPC method.
 *
 * @generated from message evmos.claims.v1.QueryTotalUnclaimedResponse
 */
export declare class QueryTotalUnclaimedResponse extends Message<QueryTotalUnclaimedResponse> {
  /**
   * coins defines the unclaimed coins
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 1;
   */
  coins: Coin[];

  constructor(data?: PartialMessage<QueryTotalUnclaimedResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "evmos.claims.v1.QueryTotalUnclaimedResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalUnclaimedResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalUnclaimedResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalUnclaimedResponse;

  static equals(a: QueryTotalUnclaimedResponse | PlainMessage<QueryTotalUnclaimedResponse> | undefined, b: QueryTotalUnclaimedResponse | PlainMessage<QueryTotalUnclaimedResponse> | undefined): boolean;
}

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message evmos.claims.v1.QueryParamsRequest
 */
export declare class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "evmos.claims.v1.QueryParamsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest;

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean;
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message evmos.claims.v1.QueryParamsResponse
 */
export declare class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params defines the parameters of the module.
   *
   * @generated from field: evmos.claims.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "evmos.claims.v1.QueryParamsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse;

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean;
}

/**
 * QueryClaimsRecordsRequest is the request type for the Query/ClaimsRecords RPC
 * method.
 *
 * @generated from message evmos.claims.v1.QueryClaimsRecordsRequest
 */
export declare class QueryClaimsRecordsRequest extends Message<QueryClaimsRecordsRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryClaimsRecordsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "evmos.claims.v1.QueryClaimsRecordsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClaimsRecordsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClaimsRecordsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClaimsRecordsRequest;

  static equals(a: QueryClaimsRecordsRequest | PlainMessage<QueryClaimsRecordsRequest> | undefined, b: QueryClaimsRecordsRequest | PlainMessage<QueryClaimsRecordsRequest> | undefined): boolean;
}

/**
 * QueryClaimsRecordsResponse is the response type for the Query/ClaimsRecords
 * RPC method.
 *
 * @generated from message evmos.claims.v1.QueryClaimsRecordsResponse
 */
export declare class QueryClaimsRecordsResponse extends Message<QueryClaimsRecordsResponse> {
  /**
   * claims defines all claims records
   *
   * @generated from field: repeated evmos.claims.v1.ClaimsRecordAddress claims = 1;
   */
  claims: ClaimsRecordAddress[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryClaimsRecordsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "evmos.claims.v1.QueryClaimsRecordsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClaimsRecordsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClaimsRecordsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClaimsRecordsResponse;

  static equals(a: QueryClaimsRecordsResponse | PlainMessage<QueryClaimsRecordsResponse> | undefined, b: QueryClaimsRecordsResponse | PlainMessage<QueryClaimsRecordsResponse> | undefined): boolean;
}

/**
 * QueryClaimsRecordRequest is the request type for the Query/ClaimsRecord RPC
 * method.
 *
 * @generated from message evmos.claims.v1.QueryClaimsRecordRequest
 */
export declare class QueryClaimsRecordRequest extends Message<QueryClaimsRecordRequest> {
  /**
   * address defines the user to query claims record for
   *
   * @generated from field: string address = 1;
   */
  address: string;

  constructor(data?: PartialMessage<QueryClaimsRecordRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "evmos.claims.v1.QueryClaimsRecordRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClaimsRecordRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClaimsRecordRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClaimsRecordRequest;

  static equals(a: QueryClaimsRecordRequest | PlainMessage<QueryClaimsRecordRequest> | undefined, b: QueryClaimsRecordRequest | PlainMessage<QueryClaimsRecordRequest> | undefined): boolean;
}

/**
 * QueryClaimsRecordResponse is the response type for the Query/ClaimsRecord RPC
 * method.
 *
 * @generated from message evmos.claims.v1.QueryClaimsRecordResponse
 */
export declare class QueryClaimsRecordResponse extends Message<QueryClaimsRecordResponse> {
  /**
   * initial_claimable_amount of the user
   *
   * @generated from field: string initial_claimable_amount = 1;
   */
  initialClaimableAmount: string;

  /**
   * claims of the user
   *
   * @generated from field: repeated evmos.claims.v1.Claim claims = 2;
   */
  claims: Claim[];

  constructor(data?: PartialMessage<QueryClaimsRecordResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "evmos.claims.v1.QueryClaimsRecordResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClaimsRecordResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClaimsRecordResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClaimsRecordResponse;

  static equals(a: QueryClaimsRecordResponse | PlainMessage<QueryClaimsRecordResponse> | undefined, b: QueryClaimsRecordResponse | PlainMessage<QueryClaimsRecordResponse> | undefined): boolean;
}

