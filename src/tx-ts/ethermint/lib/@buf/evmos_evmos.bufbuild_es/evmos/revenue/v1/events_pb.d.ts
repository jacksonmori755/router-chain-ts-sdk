// @generated by protoc-gen-es v1.0.0 with parameter "rewrite_imports=./google/api/**/*_pb.js:@buf/googleapis_googleapis.bufbuild_es,rewrite_imports=./gogoproto/**/*_pb.js:@buf/cosmos_gogo-proto.bufbuild_es,rewrite_imports=./cosmos_proto/**/*_pb.js:@buf/cosmos_cosmos-proto.bufbuild_es,rewrite_imports=./cosmos/vesting/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/msg/v1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/base/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/base/query/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/bank/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/auth/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./amino/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es"
// @generated from file evmos/revenue/v1/events.proto (package evmos.revenue.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * EventRegisterRevenue is an event emitted when a contract is registered to receive a percentage of tx fees.
 *
 * @generated from message evmos.revenue.v1.EventRegisterRevenue
 */
export declare class EventRegisterRevenue extends Message<EventRegisterRevenue> {
  /**
   * deployer_address is the bech32 address of message sender. It must be the same as the origin EOA
   * sending the transaction which deploys the contract
   *
   * @generated from field: string deployer_address = 1;
   */
  deployerAddress: string;

  /**
   * contract_address in hex format
   *
   * @generated from field: string contract_address = 2;
   */
  contractAddress: string;

  /**
   * effective_withdrawer is the withdrawer address that is stored after the
   * revenue registration is completed. It defaults to the deployer address if
   * the withdrawer address in the msg is omitted. When omitted, the withdraw map
   * doesn't need to be set.
   *
   * @generated from field: string effective_withdrawer = 3;
   */
  effectiveWithdrawer: string;

  constructor(data?: PartialMessage<EventRegisterRevenue>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "evmos.revenue.v1.EventRegisterRevenue";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventRegisterRevenue;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventRegisterRevenue;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventRegisterRevenue;

  static equals(a: EventRegisterRevenue | PlainMessage<EventRegisterRevenue> | undefined, b: EventRegisterRevenue | PlainMessage<EventRegisterRevenue> | undefined): boolean;
}

/**
 * EventUpdateRevenue is an event emitted when a withdrawer address is updated for a contract.
 *
 * @generated from message evmos.revenue.v1.EventUpdateRevenue
 */
export declare class EventUpdateRevenue extends Message<EventUpdateRevenue> {
  /**
   * contract_address in hex format
   *
   * @generated from field: string contract_address = 1;
   */
  contractAddress: string;

  /**
   * deployer_address is the bech32 address of message sender. It must be the same as the origin EOA
   * sending the transaction which deploys the contract
   *
   * @generated from field: string deployer_address = 2;
   */
  deployerAddress: string;

  /**
   * withdrawer_address is the bech32 address of account receiving the transaction fees
   *
   * @generated from field: string withdrawer_address = 3;
   */
  withdrawerAddress: string;

  constructor(data?: PartialMessage<EventUpdateRevenue>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "evmos.revenue.v1.EventUpdateRevenue";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventUpdateRevenue;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventUpdateRevenue;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventUpdateRevenue;

  static equals(a: EventUpdateRevenue | PlainMessage<EventUpdateRevenue> | undefined, b: EventUpdateRevenue | PlainMessage<EventUpdateRevenue> | undefined): boolean;
}

/**
 * EventCancelRevenue is an event emitted when a contract is unregistered from receiving tx fees.
 *
 * @generated from message evmos.revenue.v1.EventCancelRevenue
 */
export declare class EventCancelRevenue extends Message<EventCancelRevenue> {
  /**
   * deployer_address is the bech32 address of message sender. It must be the same as the origin EOA
   * sending the transaction which deploys the contract
   *
   * @generated from field: string deployer_address = 1;
   */
  deployerAddress: string;

  /**
   * contract_address in hex format
   *
   * @generated from field: string contract_address = 2;
   */
  contractAddress: string;

  constructor(data?: PartialMessage<EventCancelRevenue>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "evmos.revenue.v1.EventCancelRevenue";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventCancelRevenue;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventCancelRevenue;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventCancelRevenue;

  static equals(a: EventCancelRevenue | PlainMessage<EventCancelRevenue> | undefined, b: EventCancelRevenue | PlainMessage<EventCancelRevenue> | undefined): boolean;
}

/**
 * EventDistributeRevenue is an event emitted when a contract receives a percentage of tx fees.
 *
 * @generated from message evmos.revenue.v1.EventDistributeRevenue
 */
export declare class EventDistributeRevenue extends Message<EventDistributeRevenue> {
  /**
   * sender is the address of message sender.
   *
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * contract address in hex format
   *
   * @generated from field: string contract = 2;
   */
  contract: string;

  /**
   * withdrawer_address is the bech32 address of account receiving the transaction fees
   *
   * @generated from field: string withdrawer_address = 3;
   */
  withdrawerAddress: string;

  /**
   * amount of revenue distributed
   *
   * @generated from field: string amount = 4;
   */
  amount: string;

  constructor(data?: PartialMessage<EventDistributeRevenue>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "evmos.revenue.v1.EventDistributeRevenue";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventDistributeRevenue;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventDistributeRevenue;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventDistributeRevenue;

  static equals(a: EventDistributeRevenue | PlainMessage<EventDistributeRevenue> | undefined, b: EventDistributeRevenue | PlainMessage<EventDistributeRevenue> | undefined): boolean;
}

