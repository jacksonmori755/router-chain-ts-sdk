// @generated by protoc-gen-es v1.0.0 with parameter "rewrite_imports=./google/api/**/*_pb.js:@buf/googleapis_googleapis.bufbuild_es,rewrite_imports=./gogoproto/**/*_pb.js:@buf/cosmos_gogo-proto.bufbuild_es,rewrite_imports=./cosmos_proto/**/*_pb.js:@buf/cosmos_cosmos-proto.bufbuild_es,rewrite_imports=./cosmos/vesting/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/msg/v1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/base/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/base/query/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/bank/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/auth/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./amino/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es"
// @generated from file evmos/erc20/v1/erc20.proto (package evmos.erc20.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Metadata } from "@buf/cosmos_cosmos-sdk.bufbuild_es/cosmos/bank/v1beta1/bank_pb.js";

/**
 * Owner enumerates the ownership of a ERC20 contract.
 *
 * @generated from enum evmos.erc20.v1.Owner
 */
export declare enum Owner {
  /**
   * OWNER_UNSPECIFIED defines an invalid/undefined owner.
   *
   * @generated from enum value: OWNER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * OWNER_MODULE - erc20 is owned by the erc20 module account.
   *
   * @generated from enum value: OWNER_MODULE = 1;
   */
  MODULE = 1,

  /**
   * OWNER_EXTERNAL - erc20 is owned by an external account.
   *
   * @generated from enum value: OWNER_EXTERNAL = 2;
   */
  EXTERNAL = 2,
}

/**
 * TokenPair defines an instance that records a pairing consisting of a native
 *  Cosmos Coin and an ERC20 token address.
 *
 * @generated from message evmos.erc20.v1.TokenPair
 */
export declare class TokenPair extends Message<TokenPair> {
  /**
   * erc20_address is the hex address of ERC20 contract token
   *
   * @generated from field: string erc20_address = 1;
   */
  erc20Address: string;

  /**
   * denom defines the cosmos base denomination to be mapped to
   *
   * @generated from field: string denom = 2;
   */
  denom: string;

  /**
   * enabled defines the token mapping enable status
   *
   * @generated from field: bool enabled = 3;
   */
  enabled: boolean;

  /**
   * contract_owner is the an ENUM specifying the type of ERC20 owner (0 invalid, 1 ModuleAccount, 2 external address)
   *
   * @generated from field: evmos.erc20.v1.Owner contract_owner = 4;
   */
  contractOwner: Owner;

  constructor(data?: PartialMessage<TokenPair>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "evmos.erc20.v1.TokenPair";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenPair;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenPair;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenPair;

  static equals(a: TokenPair | PlainMessage<TokenPair> | undefined, b: TokenPair | PlainMessage<TokenPair> | undefined): boolean;
}

/**
 * RegisterCoinProposal is a gov Content type to register a token pair for a
 * native Cosmos coin.
 *
 * @generated from message evmos.erc20.v1.RegisterCoinProposal
 */
export declare class RegisterCoinProposal extends Message<RegisterCoinProposal> {
  /**
   * title of the proposal
   *
   * @generated from field: string title = 1;
   */
  title: string;

  /**
   * description of the proposal
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * metadata slice of the native Cosmos coins
   *
   * @generated from field: repeated cosmos.bank.v1beta1.Metadata metadata = 3;
   */
  metadata: Metadata[];

  constructor(data?: PartialMessage<RegisterCoinProposal>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "evmos.erc20.v1.RegisterCoinProposal";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterCoinProposal;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterCoinProposal;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterCoinProposal;

  static equals(a: RegisterCoinProposal | PlainMessage<RegisterCoinProposal> | undefined, b: RegisterCoinProposal | PlainMessage<RegisterCoinProposal> | undefined): boolean;
}

/**
 * RegisterERC20Proposal is a gov Content type to register a token pair for an
 * ERC20 token
 *
 * @generated from message evmos.erc20.v1.RegisterERC20Proposal
 */
export declare class RegisterERC20Proposal extends Message<RegisterERC20Proposal> {
  /**
   * title of the proposal
   *
   * @generated from field: string title = 1;
   */
  title: string;

  /**
   * description of the proposal
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * erc20addresses is a slice of  ERC20 token contract addresses
   *
   * @generated from field: repeated string erc20addresses = 3;
   */
  erc20addresses: string[];

  constructor(data?: PartialMessage<RegisterERC20Proposal>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "evmos.erc20.v1.RegisterERC20Proposal";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterERC20Proposal;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterERC20Proposal;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterERC20Proposal;

  static equals(a: RegisterERC20Proposal | PlainMessage<RegisterERC20Proposal> | undefined, b: RegisterERC20Proposal | PlainMessage<RegisterERC20Proposal> | undefined): boolean;
}

/**
 * ToggleTokenConversionProposal is a gov Content type to toggle the conversion
 * of a token pair.
 *
 * @generated from message evmos.erc20.v1.ToggleTokenConversionProposal
 */
export declare class ToggleTokenConversionProposal extends Message<ToggleTokenConversionProposal> {
  /**
   * title of the proposal
   *
   * @generated from field: string title = 1;
   */
  title: string;

  /**
   * description of the proposal
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * token identifier can be either the hex contract address of the ERC20 or the
   * Cosmos base denomination
   *
   * @generated from field: string token = 3;
   */
  token: string;

  constructor(data?: PartialMessage<ToggleTokenConversionProposal>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "evmos.erc20.v1.ToggleTokenConversionProposal";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToggleTokenConversionProposal;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToggleTokenConversionProposal;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToggleTokenConversionProposal;

  static equals(a: ToggleTokenConversionProposal | PlainMessage<ToggleTokenConversionProposal> | undefined, b: ToggleTokenConversionProposal | PlainMessage<ToggleTokenConversionProposal> | undefined): boolean;
}

/**
 * ProposalMetadata is used to parse a slice of denom metadata and generate
 * the RegisterCoinProposal content.
 *
 * @generated from message evmos.erc20.v1.ProposalMetadata
 */
export declare class ProposalMetadata extends Message<ProposalMetadata> {
  /**
   * metadata slice of the native Cosmos coins
   *
   * @generated from field: repeated cosmos.bank.v1beta1.Metadata metadata = 1;
   */
  metadata: Metadata[];

  constructor(data?: PartialMessage<ProposalMetadata>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "evmos.erc20.v1.ProposalMetadata";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProposalMetadata;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProposalMetadata;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProposalMetadata;

  static equals(a: ProposalMetadata | PlainMessage<ProposalMetadata> | undefined, b: ProposalMetadata | PlainMessage<ProposalMetadata> | undefined): boolean;
}

