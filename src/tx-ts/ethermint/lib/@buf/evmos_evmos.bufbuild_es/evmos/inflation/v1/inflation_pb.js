// @generated by protoc-gen-es v1.0.0 with parameter "rewrite_imports=./google/api/**/*_pb.js:@buf/googleapis_googleapis.bufbuild_es,rewrite_imports=./gogoproto/**/*_pb.js:@buf/cosmos_gogo-proto.bufbuild_es,rewrite_imports=./cosmos_proto/**/*_pb.js:@buf/cosmos_cosmos-proto.bufbuild_es,rewrite_imports=./cosmos/vesting/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/msg/v1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/base/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/base/query/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/bank/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/auth/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./amino/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es"
// @generated from file evmos/inflation/v1/inflation.proto (package evmos.inflation.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * InflationDistribution defines the distribution in which inflation is
 * allocated through minting on each epoch (staking, incentives, community). It
 * excludes the team vesting distribution, as this is minted once at genesis.
 * The initial InflationDistribution can be calculated from the Evmos Token
 * Model like this:
 * mintDistribution1 = distribution1 / (1 - teamVestingDistribution)
 * 0.5333333         = 40%           / (1 - 25%)
 *
 * @generated from message evmos.inflation.v1.InflationDistribution
 */
export const InflationDistribution = proto3.makeMessageType(
  "evmos.inflation.v1.InflationDistribution",
  () => [
    { no: 1, name: "staking_rewards", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "usage_incentives", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "community_pool", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * ExponentialCalculation holds factors to calculate exponential inflation on
 * each period. Calculation reference:
 * periodProvision = exponentialDecay       *  bondingIncentive
 * f(x)            = (a * (1 - r) ^ x + c)  *  (1 + max_variance - bondedRatio *
 * (max_variance / bonding_target))
 *
 * @generated from message evmos.inflation.v1.ExponentialCalculation
 */
export const ExponentialCalculation = proto3.makeMessageType(
  "evmos.inflation.v1.ExponentialCalculation",
  () => [
    { no: 1, name: "a", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "r", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "c", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "bonding_target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "max_variance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

