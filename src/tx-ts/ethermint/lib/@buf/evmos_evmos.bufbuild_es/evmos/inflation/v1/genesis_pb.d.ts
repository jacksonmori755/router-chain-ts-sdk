// @generated by protoc-gen-es v1.0.0 with parameter "rewrite_imports=./google/api/**/*_pb.js:@buf/googleapis_googleapis.bufbuild_es,rewrite_imports=./gogoproto/**/*_pb.js:@buf/cosmos_gogo-proto.bufbuild_es,rewrite_imports=./cosmos_proto/**/*_pb.js:@buf/cosmos_cosmos-proto.bufbuild_es,rewrite_imports=./cosmos/vesting/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/msg/v1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/base/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/base/query/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/bank/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/auth/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./amino/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es"
// @generated from file evmos/inflation/v1/genesis.proto (package evmos.inflation.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { ExponentialCalculation, InflationDistribution } from "./inflation_pb.js";

/**
 * GenesisState defines the inflation module's genesis state.
 *
 * @generated from message evmos.inflation.v1.GenesisState
 */
export declare class GenesisState extends Message<GenesisState> {
  /**
   * params defines all the parameters of the module.
   *
   * @generated from field: evmos.inflation.v1.Params params = 1;
   */
  params?: Params;

  /**
   * period is the amount of past periods, based on the epochs per period param
   *
   * @generated from field: uint64 period = 2;
   */
  period: bigint;

  /**
   * epoch_identifier for inflation
   *
   * @generated from field: string epoch_identifier = 3;
   */
  epochIdentifier: string;

  /**
   * epochs_per_period is the number of epochs after which inflation is recalculated
   *
   * @generated from field: int64 epochs_per_period = 4;
   */
  epochsPerPeriod: bigint;

  /**
   * skipped_epochs is the number of epochs that have passed while inflation is disabled
   *
   * @generated from field: uint64 skipped_epochs = 5;
   */
  skippedEpochs: bigint;

  constructor(data?: PartialMessage<GenesisState>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "evmos.inflation.v1.GenesisState";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState;

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean;
}

/**
 * Params holds parameters for the inflation module.
 *
 * @generated from message evmos.inflation.v1.Params
 */
export declare class Params extends Message<Params> {
  /**
   * mint_denom specifies the type of coin to mint
   *
   * @generated from field: string mint_denom = 1;
   */
  mintDenom: string;

  /**
   * exponential_calculation takes in the variables to calculate exponential inflation
   *
   * @generated from field: evmos.inflation.v1.ExponentialCalculation exponential_calculation = 2;
   */
  exponentialCalculation?: ExponentialCalculation;

  /**
   * inflation_distribution of the minted denom
   *
   * @generated from field: evmos.inflation.v1.InflationDistribution inflation_distribution = 3;
   */
  inflationDistribution?: InflationDistribution;

  /**
   * enable_inflation is the parameter that enables inflation and halts increasing the skipped_epochs
   *
   * @generated from field: bool enable_inflation = 4;
   */
  enableInflation: boolean;

  constructor(data?: PartialMessage<Params>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "evmos.inflation.v1.Params";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params;

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean;
}

