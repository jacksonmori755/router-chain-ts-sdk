// @generated by protoc-gen-es v1.0.0 with parameter "rewrite_imports=./tendermint/version/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./tendermint/types/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./tendermint/crypto/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./google/api/**/*_pb.js:@buf/googleapis_googleapis.bufbuild_es,rewrite_imports=./gogoproto/**/*_pb.js:@buf/cosmos_gogo-proto.bufbuild_es,rewrite_imports=./cosmos_proto/**/*_pb.js:@buf/cosmos_cosmos-proto.bufbuild_es,rewrite_imports=./cosmos/upgrade/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/ics23/v1/**/*_pb.js:@buf/cosmos_ics23.bufbuild_es,rewrite_imports=./cosmos/base/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/base/query/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/auth/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./amino/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es"
// @generated from file ibc/lightclients/solomachine/v3/solomachine.proto (package ibc.lightclients.solomachine.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, proto3 } from "@bufbuild/protobuf";

/**
 * ClientState defines a solo machine client that tracks the current consensus
 * state and if the client is frozen.
 *
 * @generated from message ibc.lightclients.solomachine.v3.ClientState
 */
export const ClientState = proto3.makeMessageType(
  "ibc.lightclients.solomachine.v3.ClientState",
  () => [
    { no: 1, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "is_frozen", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "consensus_state", kind: "message", T: ConsensusState },
  ],
);

/**
 * ConsensusState defines a solo machine consensus state. The sequence of a
 * consensus state is contained in the "height" key used in storing the
 * consensus state.
 *
 * @generated from message ibc.lightclients.solomachine.v3.ConsensusState
 */
export const ConsensusState = proto3.makeMessageType(
  "ibc.lightclients.solomachine.v3.ConsensusState",
  () => [
    { no: 1, name: "public_key", kind: "message", T: Any },
    { no: 2, name: "diversifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * Header defines a solo machine consensus header
 *
 * @generated from message ibc.lightclients.solomachine.v3.Header
 */
export const Header = proto3.makeMessageType(
  "ibc.lightclients.solomachine.v3.Header",
  () => [
    { no: 1, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "new_public_key", kind: "message", T: Any },
    { no: 4, name: "new_diversifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Misbehaviour defines misbehaviour for a solo machine which consists
 * of a sequence and two signatures over different messages at that sequence.
 *
 * @generated from message ibc.lightclients.solomachine.v3.Misbehaviour
 */
export const Misbehaviour = proto3.makeMessageType(
  "ibc.lightclients.solomachine.v3.Misbehaviour",
  () => [
    { no: 1, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "signature_one", kind: "message", T: SignatureAndData },
    { no: 3, name: "signature_two", kind: "message", T: SignatureAndData },
  ],
);

/**
 * SignatureAndData contains a signature and the data signed over to create that
 * signature.
 *
 * @generated from message ibc.lightclients.solomachine.v3.SignatureAndData
 */
export const SignatureAndData = proto3.makeMessageType(
  "ibc.lightclients.solomachine.v3.SignatureAndData",
  () => [
    { no: 1, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "path", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * TimestampedSignatureData contains the signature data and the timestamp of the
 * signature.
 *
 * @generated from message ibc.lightclients.solomachine.v3.TimestampedSignatureData
 */
export const TimestampedSignatureData = proto3.makeMessageType(
  "ibc.lightclients.solomachine.v3.TimestampedSignatureData",
  () => [
    { no: 1, name: "signature_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * SignBytes defines the signed bytes used for signature verification.
 *
 * @generated from message ibc.lightclients.solomachine.v3.SignBytes
 */
export const SignBytes = proto3.makeMessageType(
  "ibc.lightclients.solomachine.v3.SignBytes",
  () => [
    { no: 1, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "diversifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "path", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * HeaderData returns the SignBytes data for update verification.
 *
 * @generated from message ibc.lightclients.solomachine.v3.HeaderData
 */
export const HeaderData = proto3.makeMessageType(
  "ibc.lightclients.solomachine.v3.HeaderData",
  () => [
    { no: 1, name: "new_pub_key", kind: "message", T: Any },
    { no: 2, name: "new_diversifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

