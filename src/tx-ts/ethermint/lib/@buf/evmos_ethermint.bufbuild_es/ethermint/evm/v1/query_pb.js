// @generated by protoc-gen-es v1.0.0 with parameter "rewrite_imports=./google/api/**/*_pb.js:@buf/googleapis_googleapis.bufbuild_es,rewrite_imports=./gogoproto/**/*_pb.js:@buf/cosmos_gogo-proto.bufbuild_es,rewrite_imports=./cosmos_proto/**/*_pb.js:@buf/cosmos_cosmos-proto.bufbuild_es,rewrite_imports=./cosmos/msg/v1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/base/query/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./cosmos/auth/v1beta1/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es,rewrite_imports=./amino/**/*_pb.js:@buf/cosmos_cosmos-sdk.bufbuild_es"
// @generated from file ethermint/evm/v1/query.proto (package ethermint.evm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3, Timestamp } from "@bufbuild/protobuf";
import { PageRequest, PageResponse } from "@buf/cosmos_cosmos-sdk.bufbuild_es/cosmos/base/query/v1beta1/pagination_pb.js";
import { Log, Params, TraceConfig } from "./evm_pb.js";
import { MsgEthereumTx } from "./tx_pb.js";

/**
 * QueryAccountRequest is the request type for the Query/Account RPC method.
 *
 * @generated from message ethermint.evm.v1.QueryAccountRequest
 */
export const QueryAccountRequest = proto3.makeMessageType(
  "ethermint.evm.v1.QueryAccountRequest",
  () => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * QueryAccountResponse is the response type for the Query/Account RPC method.
 *
 * @generated from message ethermint.evm.v1.QueryAccountResponse
 */
export const QueryAccountResponse = proto3.makeMessageType(
  "ethermint.evm.v1.QueryAccountResponse",
  () => [
    { no: 1, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * QueryCosmosAccountRequest is the request type for the Query/CosmosAccount RPC
 * method.
 *
 * @generated from message ethermint.evm.v1.QueryCosmosAccountRequest
 */
export const QueryCosmosAccountRequest = proto3.makeMessageType(
  "ethermint.evm.v1.QueryCosmosAccountRequest",
  () => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * QueryCosmosAccountResponse is the response type for the Query/CosmosAccount
 * RPC method.
 *
 * @generated from message ethermint.evm.v1.QueryCosmosAccountResponse
 */
export const QueryCosmosAccountResponse = proto3.makeMessageType(
  "ethermint.evm.v1.QueryCosmosAccountResponse",
  () => [
    { no: 1, name: "cosmos_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "account_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * QueryValidatorAccountRequest is the request type for the
 * Query/ValidatorAccount RPC method.
 *
 * @generated from message ethermint.evm.v1.QueryValidatorAccountRequest
 */
export const QueryValidatorAccountRequest = proto3.makeMessageType(
  "ethermint.evm.v1.QueryValidatorAccountRequest",
  () => [
    { no: 1, name: "cons_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * QueryValidatorAccountResponse is the response type for the
 * Query/ValidatorAccount RPC method.
 *
 * @generated from message ethermint.evm.v1.QueryValidatorAccountResponse
 */
export const QueryValidatorAccountResponse = proto3.makeMessageType(
  "ethermint.evm.v1.QueryValidatorAccountResponse",
  () => [
    { no: 1, name: "account_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "account_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * QueryBalanceRequest is the request type for the Query/Balance RPC method.
 *
 * @generated from message ethermint.evm.v1.QueryBalanceRequest
 */
export const QueryBalanceRequest = proto3.makeMessageType(
  "ethermint.evm.v1.QueryBalanceRequest",
  () => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * QueryBalanceResponse is the response type for the Query/Balance RPC method.
 *
 * @generated from message ethermint.evm.v1.QueryBalanceResponse
 */
export const QueryBalanceResponse = proto3.makeMessageType(
  "ethermint.evm.v1.QueryBalanceResponse",
  () => [
    { no: 1, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * QueryStorageRequest is the request type for the Query/Storage RPC method.
 *
 * @generated from message ethermint.evm.v1.QueryStorageRequest
 */
export const QueryStorageRequest = proto3.makeMessageType(
  "ethermint.evm.v1.QueryStorageRequest",
  () => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * QueryStorageResponse is the response type for the Query/Storage RPC
 * method.
 *
 * @generated from message ethermint.evm.v1.QueryStorageResponse
 */
export const QueryStorageResponse = proto3.makeMessageType(
  "ethermint.evm.v1.QueryStorageResponse",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * QueryCodeRequest is the request type for the Query/Code RPC method.
 *
 * @generated from message ethermint.evm.v1.QueryCodeRequest
 */
export const QueryCodeRequest = proto3.makeMessageType(
  "ethermint.evm.v1.QueryCodeRequest",
  () => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * QueryCodeResponse is the response type for the Query/Code RPC
 * method.
 *
 * @generated from message ethermint.evm.v1.QueryCodeResponse
 */
export const QueryCodeResponse = proto3.makeMessageType(
  "ethermint.evm.v1.QueryCodeResponse",
  () => [
    { no: 1, name: "code", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * QueryTxLogsRequest is the request type for the Query/TxLogs RPC method.
 *
 * @generated from message ethermint.evm.v1.QueryTxLogsRequest
 */
export const QueryTxLogsRequest = proto3.makeMessageType(
  "ethermint.evm.v1.QueryTxLogsRequest",
  () => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ],
);

/**
 * QueryTxLogsResponse is the response type for the Query/TxLogs RPC method.
 *
 * @generated from message ethermint.evm.v1.QueryTxLogsResponse
 */
export const QueryTxLogsResponse = proto3.makeMessageType(
  "ethermint.evm.v1.QueryTxLogsResponse",
  () => [
    { no: 1, name: "logs", kind: "message", T: Log, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ],
);

/**
 * QueryParamsRequest defines the request type for querying x/evm parameters.
 *
 * @generated from message ethermint.evm.v1.QueryParamsRequest
 */
export const QueryParamsRequest = proto3.makeMessageType(
  "ethermint.evm.v1.QueryParamsRequest",
  [],
);

/**
 * QueryParamsResponse defines the response type for querying x/evm parameters.
 *
 * @generated from message ethermint.evm.v1.QueryParamsResponse
 */
export const QueryParamsResponse = proto3.makeMessageType(
  "ethermint.evm.v1.QueryParamsResponse",
  () => [
    { no: 1, name: "params", kind: "message", T: Params },
  ],
);

/**
 * EthCallRequest defines EthCall request
 *
 * @generated from message ethermint.evm.v1.EthCallRequest
 */
export const EthCallRequest = proto3.makeMessageType(
  "ethermint.evm.v1.EthCallRequest",
  () => [
    { no: 1, name: "args", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "gas_cap", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "proposer_address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "chain_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * EstimateGasResponse defines EstimateGas response
 *
 * @generated from message ethermint.evm.v1.EstimateGasResponse
 */
export const EstimateGasResponse = proto3.makeMessageType(
  "ethermint.evm.v1.EstimateGasResponse",
  () => [
    { no: 1, name: "gas", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * QueryTraceTxRequest defines TraceTx request
 *
 * @generated from message ethermint.evm.v1.QueryTraceTxRequest
 */
export const QueryTraceTxRequest = proto3.makeMessageType(
  "ethermint.evm.v1.QueryTraceTxRequest",
  () => [
    { no: 1, name: "msg", kind: "message", T: MsgEthereumTx },
    { no: 3, name: "trace_config", kind: "message", T: TraceConfig },
    { no: 4, name: "predecessors", kind: "message", T: MsgEthereumTx, repeated: true },
    { no: 5, name: "block_number", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "block_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "block_time", kind: "message", T: Timestamp },
    { no: 8, name: "proposer_address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 9, name: "chain_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * QueryTraceTxResponse defines TraceTx response
 *
 * @generated from message ethermint.evm.v1.QueryTraceTxResponse
 */
export const QueryTraceTxResponse = proto3.makeMessageType(
  "ethermint.evm.v1.QueryTraceTxResponse",
  () => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * QueryTraceBlockRequest defines TraceTx request
 *
 * @generated from message ethermint.evm.v1.QueryTraceBlockRequest
 */
export const QueryTraceBlockRequest = proto3.makeMessageType(
  "ethermint.evm.v1.QueryTraceBlockRequest",
  () => [
    { no: 1, name: "txs", kind: "message", T: MsgEthereumTx, repeated: true },
    { no: 3, name: "trace_config", kind: "message", T: TraceConfig },
    { no: 5, name: "block_number", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "block_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "block_time", kind: "message", T: Timestamp },
    { no: 8, name: "proposer_address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 9, name: "chain_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * QueryTraceBlockResponse defines TraceBlock response
 *
 * @generated from message ethermint.evm.v1.QueryTraceBlockResponse
 */
export const QueryTraceBlockResponse = proto3.makeMessageType(
  "ethermint.evm.v1.QueryTraceBlockResponse",
  () => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * QueryBaseFeeRequest defines the request type for querying the EIP1559 base
 * fee.
 *
 * @generated from message ethermint.evm.v1.QueryBaseFeeRequest
 */
export const QueryBaseFeeRequest = proto3.makeMessageType(
  "ethermint.evm.v1.QueryBaseFeeRequest",
  [],
);

/**
 * QueryBaseFeeResponse returns the EIP1559 base fee.
 *
 * @generated from message ethermint.evm.v1.QueryBaseFeeResponse
 */
export const QueryBaseFeeResponse = proto3.makeMessageType(
  "ethermint.evm.v1.QueryBaseFeeResponse",
  () => [
    { no: 1, name: "base_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

